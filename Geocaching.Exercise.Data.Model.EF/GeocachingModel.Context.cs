//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Geocaching.Exercise.Data.Model.EF
{
    using Geocaching.Exercise.Data.Entities;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GeocachingEntities : GeocachingDbContext
    {
        public GeocachingEntities()
            : base("name=GeocachingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Geocache> Geocaches { get; set; }
    
        public virtual int spGeocacheDelete(Nullable<int> geocacheId)
        {
            var geocacheIdParameter = geocacheId.HasValue ?
                new ObjectParameter("GeocacheId", geocacheId) :
                new ObjectParameter("GeocacheId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGeocacheDelete", geocacheIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGeocacheAdd(string name, string description, Nullable<double> latitude, Nullable<double> longitude)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGeocacheAdd", nameParameter, descriptionParameter, latitudeParameter, longitudeParameter);
        }
    }
}
